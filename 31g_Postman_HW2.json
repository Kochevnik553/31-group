{
	"info": {
		"_postman_id": "7a817d55-e68a-4a66-be5f-e06464d4f601",
		"name": "31_QA_Postman HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18486233"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let Jdata = JSON.parse (responseBody);\r",
							"console.log (\"Jdata:\", Jdata)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name_s_request = Jdata.name;\r",
							"pm.test (\"name_s_request is eql\"), function () {\r",
							"    pm.expect (name_s_request).to.eql(jData.name)\r",
							"}\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age_s_request = Jdata.age;\r",
							"pm.test (\"age_s_request is eql\"), function () {\r",
							"    pm.expect (age_s_request).to.eql(jData.age)\r",
							"}\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary_s_request = Jdata.salary;\r",
							"pm.test (\"salary_s_request is eql\"), function () {\r",
							"    pm.expect (salary_s_request).to.eql(jData.salary)\r",
							"}\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let data_req = request.data;\r",
							"console.log (\"data_req:\", data_req)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_s_req = data_req.name;\r",
							"pm.test (\"name_s_req is eql\"), function () {\r",
							"    pm.expect (name_s_req).to.eql(data_req.name)\r",
							"}\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_s_req = data_req.age;\r",
							"pm.test (\"age_s_req is eql\"), function () {\r",
							"    pm.expect (age_s_req).to.eql(data_req.age)\r",
							"}\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_s_req = data_req.salary;\r",
							"pm.test (\"salary_s_req is eql\"), function () {\r",
							"    pm.expect (salary_s_req).to.eql(data_req.salary)\r",
							"}\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family_resp = Jdata.family;\r",
							"console.log (\"family from response:\", Jdata.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = Jdata.family.u_salary_1_5_year;\r",
							"let salary_mlt_4 = data_req.salary*4;\r",
							"pm.test (\"u_salary_1_5_year is eql request_salary*4\"), function() {\r",
							"    pm.expect(u_salary_1_5_year).to.eql(salary_mlt_4)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Bogdan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let JDATA = JSON.parse (responseBody);\r",
							"console.log (\"JDATA:\", JDATA)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_DATA = request.data;\r",
							"console.log (\"req_DATA:\", req_DATA)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_s_request = req_DATA.name;\r",
							"let name_response = JDATA.name;\r",
							"pm.test(\"name_response is eql name_s_request\"), function() {\r",
							"    pm.expect(name_response).to.eql(name_s_request)\r",
							"}\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_s_request = req_DATA.age;\r",
							"let age_response = JDATA.age;\r",
							"pm.test(\"age_response is eql age_s_request\"), function() {\r",
							"    pm.expect(age_response).to.eql(age_s_request)\r",
							"}\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_s_request = req_DATA.salary;\r",
							"let salary_response = JDATA.salary;\r",
							"pm.test(\"salary_response is eql salary_s_request\"), function() {\r",
							"    pm.expect(salary_response).to.eql(salary_s_request)\r",
							"}\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log (\"family_response:\", JDATA.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Checkout → dog_name\"), function() {\r",
							"    pm.expect(JDATA.family.pets.dog).to.have.property(\"name\");\r",
							"}\r",
							"console.log(\"Family dog_name:\", JDATA.family.pets.dog.name)\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Checkout → dog_age\"), function() {\r",
							"    pm.expect(JDATA.family.pets.dog).to.have.property(\"age\");\r",
							"}\r",
							"console.log(\"Family dog_age:\", JDATA.family.pets.dog.age)\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Checkout → dog_name: Luky\"), function() {\r",
							"    pm.expect(JDATA.family.pets.dog.name).to.eql(\"Luky\")\r",
							"}\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Checkout → dog_age: 4\"), function() {\r",
							"    pm.expect(JDATA.family.pets.dog.age).to.eql(4)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "Bogdan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Bogdan&age=29&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Bogdan"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let JSDATA = JSON.parse (responseBody)\r",
							"console.log (\"JSDATA:\", JSDATA)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let REQDATA = pm.request.url.query.toObject();\r",
							"console.log (\"REQDATA:\", REQDATA)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name = JSDATA.name;\r",
							"let name_s_request = REQDATA.name;\r",
							"pm.test (\"name is eql name_s_request\", function() {\r",
							"    pm.expect(name).to.eql(name_s_request); \r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age = JSDATA.age;\r",
							"let age_s_request = REQDATA.age;\r",
							"pm.test (\"age is eql age_s_request\", function() {\r",
							"    pm.expect(age).to.eql(+age_s_request); \r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary_request\", REQDATA.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log (\"salary_response\", JSDATA.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let zero_salary = JSDATA.salary[0];\r",
							"console.log(\"zero_salary:\", zero_salary)\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let first_salary = JSDATA.salary[1];\r",
							"console.log(\"first_salary:\", first_salary)\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let second_salary = JSDATA.salary[2];\r",
							"console.log(\"second_salary:\", second_salary)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = Number (REQDATA.salary);\r",
							"pm.test(\"comparasion zero_salary\", function() {\r",
							"    pm.expect(zero_salary).to.eql(req_salary);\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"comparasion first_salary\", function() {\r",
							"    pm.expect(+first_salary).to.eql(req_salary*2);\r",
							"})\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"comparasion second_salary\", function() {\r",
							"    pm.expect(+second_salary).to.eql(req_salary*3);\r",
							"})\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set (\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set (\"age\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set (\"salary\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", REQDATA.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", REQDATA.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", REQDATA.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i of JSDATA.salary) {\r",
							"console.log ('Salary parts: '+i);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Bogdan&age=29&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Bogdan"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let JDATA = JSON.parse (responseBody)\r",
							"console.log (\"JDATA:\", JDATA)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let REQDATA = request.data;\r",
							"console.log (\"REQDATA:\", REQDATA)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Checkout → start_qa_salary\", function() {\r",
							"    pm.expect(JDATA).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Checkout → qa_salary_after_6_months\", function() {\r",
							"    pm.expect(JDATA).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Checkout → qa_salary_after_12_months\", function() {\r",
							"    pm.expect(JDATA).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Checkout → qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(JDATA).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Checkout → qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(JDATA).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Checkout → person\", function() {\r",
							"    pm.expect(JDATA).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +REQDATA.salary;\r",
							"pm.test(\"start_qa_salary is eql req_salary\", function() {\r",
							"    pm.expect(req_salary).to.eql(JDATA.start_qa_salary)\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_up2 = +REQDATA.salary*2;\r",
							"pm.test(\"qa_salary_after_6_months is eql req_salary*2\", function() {\r",
							"    pm.expect(req_salary_up2).to.eql(JDATA.qa_salary_after_6_months)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let req_salary_up2ow7 = +REQDATA.salary*2.7;\r",
							"pm.test(\"qa_salary_after_12_months is eql req_salary*2.7\", function() {\r",
							"    pm.expect(req_salary_up2ow7).to.eql(JDATA.qa_salary_after_12_months)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_salary_1dot5year = +REQDATA.salary*3.3;\r",
							"pm.test(\"qa_salary_after_1.5_year is eql req_salary*3.3\", function() {\r",
							"    pm.expect(JDATA[\"qa_salary_after_1.5_year\"]).to.eql(req_salary_1dot5year)\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" let req_salary_3dot5years = +REQDATA.salary*3.8;\r",
							"pm.test(\"qa_salary_after_3.5_years is eql req_salary*3.8\", function() {\r",
							"    pm.expect(JDATA[\"qa_salary_after_3.5_years\"]).to.eql(req_salary_3dot5years)\r",
							" })\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let u_name_first = JDATA.person.u_name[1];\r",
							"pm.test(\"req_salalry is eql u_name_first\", function() {\r",
							"    pm.expect(u_name_first).to.eql(+REQDATA.salary)\r",
							"})\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let u_age = JDATA.person.u_age;\r",
							"let req_age = +REQDATA.age;\r",
							"pm.test(\"u_age is eql req_age\", function(){\r",
							"    pm.expect(u_age).to.eql(req_age)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let req_salary_5years = +REQDATA.salary*4.2;\r",
							"pm.test(\"u_salary_5_years is eql req_salary*4.2\", function() {\r",
							"    pm.expect(JDATA.person.u_salary_5_years).to.eql(req_salary_5years)\r",
							" })\r",
							" \r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in JDATA.person) {\r",
							"console.log (\"Elements in person: \", i);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
